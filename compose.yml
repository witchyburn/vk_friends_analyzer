services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
      - AIRFLOW_DB_USER=${AIRFLOW_DB_USER}
      - AIRFLOW_DB_PASSWORD=${AIRFLOW_DB_PASSWORD}
      - AIRFLOW_DB_NAME=${AIRFLOW_DB_NAME}
      - METABASE_DB_USER=${METABASE_DB_USER}
      - METABASE_DB_PASSWORD=${METABASE_DB_PASSWORD}
      - METABASE_DB_NAME=${METABASE_DB_NAME} 
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./postgres/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - my_net

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5000:80"
    depends_on:
      - postgres
    networks:
      - my_net

  airflow:
    image: apache/airflow:2.11.0
    container_name: airflow
    env_file:
      - .env
    restart: always
    volumes:
      - ./dags:/opt/airflow/dags
    ports:
      - "8080:8080"
    command: >
      bash -c "
      airflow db init &&
      airflow users create --username ${AIRFLOW__WEBSERVER__DEFAULT_USER_USERNAME} --password ${AIRFLOW__WEBSERVER__DEFAULT_USER_PASSWORD} --firstname Airflow --lastname Admin --role Admin --email admin@example.com &&
      (airflow webserver & airflow scheduler)
      "
    depends_on:
      - postgres
    networks:
      - my_net

  metabase:
    image: metabase/metabase
    container_name: metabase
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${METABASE_DB_NAME}
      MB_DB_PORT: 5432
      MB_DB_USER: ${METABASE_DB_USER}
      MB_DB_PASS: ${METABASE_DB_PASSWORD}
      MB_DB_HOST: postgres
    depends_on:
      - postgres
    networks:
      - my_net

networks:
  my_net:
    driver: bridge
volumes:
  dbdata: